// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/event_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:flutter_application_1/data/models/event.dart' as _i2;
import 'package:flutter_application_1/data/services/auth_service.dart' as _i6;
import 'package:flutter_application_1/data/services/event_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEvent_0 extends _i1.SmartFake implements _i2.Event {
  _FakeEvent_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCredential_1 extends _i1.SmartFake
    implements _i3.UserCredential {
  _FakeUserCredential_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [EventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventService extends _i1.Mock implements _i4.EventService {
  MockEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Event> createEvent({
    required String? name,
    required String? description,
    required String? location,
    required DateTime? dateTime,
    required int? maxAttendees,
    required int? cost,
    required String? paymentInfo,
    required String? idToken,
    String? ownerEmail,
    String? ownerId,
    String? ownerName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createEvent, [], {
              #name: name,
              #description: description,
              #location: location,
              #dateTime: dateTime,
              #maxAttendees: maxAttendees,
              #cost: cost,
              #paymentInfo: paymentInfo,
              #idToken: idToken,
              #ownerEmail: ownerEmail,
              #ownerId: ownerId,
              #ownerName: ownerName,
            }),
            returnValue: _i5.Future<_i2.Event>.value(
              _FakeEvent_0(
                this,
                Invocation.method(#createEvent, [], {
                  #name: name,
                  #description: description,
                  #location: location,
                  #dateTime: dateTime,
                  #maxAttendees: maxAttendees,
                  #cost: cost,
                  #paymentInfo: paymentInfo,
                  #idToken: idToken,
                  #ownerEmail: ownerEmail,
                  #ownerId: ownerId,
                  #ownerName: ownerName,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Event>);

  @override
  _i5.Future<void> deleteEvent(int? eventId, String? idToken) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEvent, [eventId, idToken]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Event>> fetchAllEvents() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAllEvents, []),
            returnValue: _i5.Future<List<_i2.Event>>.value(<_i2.Event>[]),
          )
          as _i5.Future<List<_i2.Event>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> fetchFriendsAttendingEvent(
    int? eventId,
    String? idToken,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFriendsAttendingEvent, [eventId, idToken]),
            returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<_i2.Event> fetchEventById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchEventById, [id]),
            returnValue: _i5.Future<_i2.Event>.value(
              _FakeEvent_0(this, Invocation.method(#fetchEventById, [id])),
            ),
          )
          as _i5.Future<_i2.Event>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i5.Stream<_i3.User?>.empty(),
          )
          as _i5.Stream<_i3.User?>);

  @override
  _i5.Future<String?> getIdToken() =>
      (super.noSuchMethod(
            Invocation.method(#getIdToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<_i3.UserCredential> signUpWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [email, password]),
            returnValue: _i5.Future<_i3.UserCredential>.value(
              _FakeUserCredential_1(
                this,
                Invocation.method(#signUpWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i5.Future<_i3.UserCredential>);

  @override
  _i5.Future<_i3.UserCredential> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i5.Future<_i3.UserCredential>.value(
              _FakeUserCredential_1(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i5.Future<_i3.UserCredential>);

  @override
  _i5.Future<_i3.UserCredential> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i5.Future<_i3.UserCredential>.value(
              _FakeUserCredential_1(
                this,
                Invocation.method(#signInWithGoogle, []),
              ),
            ),
          )
          as _i5.Future<_i3.UserCredential>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
